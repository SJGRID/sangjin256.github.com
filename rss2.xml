<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>SJ의 프로그래밍</title>
    <link>http://sangjin256.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>게임 개발을 공부하고 있는 대학생입니다.</description>
    <pubDate>Thu, 04 Jun 2020 01:09:09 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>다양한 방법으로 피보나치 수 구하기 [C#]</title>
      <link>http://sangjin256.github.io/2020/06/01/fibonacci/[object%20Object]/[object%20Object]/</link>
      <guid>http://sangjin256.github.io/2020/06/01/fibonacci/[object%20Object]/[object%20Object]/</guid>
      <pubDate>Mon, 01 Jun 2020 14:35:28 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;피보나치란&quot;&gt;&lt;a href=&quot;#피보나치란&quot; class=&quot;headerlink&quot; title=&quot;피보나치란?&quot;&gt;&lt;/a&gt;피보나치란?&lt;/h3&gt;&lt;p&gt;수학에서, 피보나치 수(영어: Fibonacci numbers)는 첫째 및 둘째 항이 1이며 그 뒤의
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="피보나치란"><a href="#피보나치란" class="headerlink" title="피보나치란?"></a>피보나치란?</h3><p>수학에서, 피보나치 수(영어: Fibonacci numbers)는 첫째 및 둘째 항이 1이며 그 뒤의 모든 항은 바로 앞 두 항의 합인 수열입니다.<br>처음 여섯 항은 각각 1, 1, 2, 3, 5, 8이다. 편의상 0번째 항을 0으로 두기도 합니다.<br><a href="https://ko.wikipedia.org/wiki/%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98_%EC%88%98" target="_blank" rel="external nofollow noopener noreferrer">위키백과</a></p><p>이 포스팅에서는 전부 0번째 항부터 시작하는 것으로 가정하겠습니다.<br>따라서 다음과 같은 점화식이 나옵니다.<br>F{0} = 0<br>F{1} = 1<br>F{n} = F{n-1} + F{n-2}</p><hr><h3 id="기본-코드"><a href="#기본-코드" class="headerlink" title="기본 코드"></a>기본 코드</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Fibo_Original</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="keyword">int</span>.Parse(Console.ReadLine());</span><br><span class="line">        Console.WriteLine(Fibonacci(n));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Fibonacci</span>(<span class="params"><span class="keyword">int</span> n</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> Fibonacci(n<span class="number">-1</span>) + Fibonacci(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fibonacci 메소드를 사용해 만든 기본적인 코드입니다.<br>0과 1일때의 값을 지정해주고 그 이상이 나오면 -1한 값과 -2한 값을 더해서 결과값을 만들었습니다.</p><h5 id="메모이제이션을-사용한-기본코드-개선"><a href="#메모이제이션을-사용한-기본코드-개선" class="headerlink" title="메모이제이션을 사용한 기본코드 개선"></a>메모이제이션을 사용한 기본코드 개선</h5><p>그러나 위의 기본 코드는 처음부터 n번째 수까지 계속 재귀를 이용해서 계산하므로 n이 크면 시간이 오래걸립니다.<br>따라서 n을 여러 번 구해야 하는 경우 아래와 같이 &#39;메모이제이션’을 사용합니다.<br>&#39;메모이제이션’은 함수의 값을 계산한 뒤 이를 배열에 저장해서 나중에 다시 사용하는 방법을 말하는데, 이 방법을 사용하면 재귀를 사용하면서 이미 구한 값이 나올 때 다시 재귀에 들어가지 않고 그 값을 바로 사용해서 계산 시간을 많이 단축시킬 수 있습니다.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Fibo_Original_Memo</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">int</span>.Parse(Console.ReadLine());</span><br><span class="line">Console.WriteLine(fibonacci(n));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span>[] processed = <span class="keyword">new</span> <span class="keyword">bool</span>[<span class="number">91</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">long</span>[] <span class="keyword">value</span> = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">91</span>];</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">fibonacci</span>(<span class="params"><span class="keyword">int</span> n</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(processed[n]) <span class="keyword">return</span> <span class="keyword">value</span>[n];</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> result = fibonacci(n<span class="number">-1</span>) + fibonacci(n<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">value</span>[n] = result;</span><br><span class="line">processed[n] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="동적-계획법으로-풀어보는-피보나치-수"><a href="#동적-계획법으로-풀어보는-피보나치-수" class="headerlink" title="동적 계획법으로 풀어보는 피보나치 수"></a>동적 계획법으로 풀어보는 피보나치 수</h3><p>피보나치 수를 구할때 위에서처럼 메소드를 따로 만들어서 재귀로 풀어도 되지만 아래처럼 동적 계획법을 사용함으로서 비재귀로 풀 수 있습니다.<br>저번 포스팅때 언급한 것처럼, 숫자가 커질수록 비재귀가 시간적 측면에서 이득이기 때문에 비재귀로 푸는 방법도 알아두는 것이 좋습니다.</p><p>&#39;동적 계획법(Dynamic Programming)’이란 큰 문제를 작은 문제들로 나눠서 생각해보는 방법을 말합니다. 피보나치 수는 점화식에서처럼 F{n}이 F{n-1}과 F{n-2}의 덧셈으로 나눠집니다. 따라서 배열을 만들고 0번째를 0, 1번째를 1로 두면 그 다음부터는 n-1번째와 n-2번째를 더하면서 n번쨰의 피보나치 수를 구할 수 있게 됩니다.</p><p>아래의 코드는 하나의 n번째 수를 받고 출력만 하도록 만들었습니다. 여러 개의 n번째 수를 받으려면 위에서 쓴 &#39;메모이제이션’을 사용하시면 시간을 많이 단축시킬 수 있습니다.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Fibo_DP</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="keyword">int</span>.Parse(Console.ReadLine());</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            dp[i] = dp[i<span class="number">-1</span>]+dp[i<span class="number">-2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(dp[n]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="행렬로-풀어보는-피보나치-수"><a href="#행렬로-풀어보는-피보나치-수" class="headerlink" title="행렬로 풀어보는 피보나치 수"></a>행렬로 풀어보는 피보나치 수</h3><p>미완</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Fibo_Matrix</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> &#123;</span><br><span class="line"><span class="comment">// 몇번째 피보나치 수열을 출력할지를 입력받는다. (n을 집어넣으면 n+1값이 나옴)</span></span><br><span class="line"><span class="keyword">int</span> n = <span class="keyword">int</span>.Parse(Console.ReadLine());</span><br><span class="line"><span class="keyword">int</span>[,] origin = <span class="keyword">new</span> <span class="keyword">int</span>[,]&#123;&#123;<span class="number">0</span>,<span class="number">1</span>&#125;, &#123;<span class="number">1</span>,<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>[,] first = <span class="keyword">new</span> <span class="keyword">int</span>[,]&#123;&#123;<span class="number">0</span>&#125;,&#123;<span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span>[,] result = square(modpow(origin, n), first);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(result[<span class="number">1</span>,<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//거듭제곱을 효율적으로 연산</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[,] modpow(<span class="keyword">int</span>[,] x, <span class="keyword">int</span> n)&#123;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">0</span> || n == <span class="number">1</span>) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">int</span>[,] u = modpow(x, n/<span class="number">2</span>);</span><br><span class="line">u = repeated_squared(u, u);</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">1</span>) u = repeated_squared(u, x);</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//f(0)과 f(1)이 들어있는 초깃값에 행렬의 거듭제곱값을 곱할때 사용</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[,] square(<span class="keyword">int</span>[,] a, <span class="keyword">int</span>[,] b)&#123;</span><br><span class="line"><span class="keyword">int</span>[,] c = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span>; j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++)&#123;</span><br><span class="line">c[i,j] += a[i,k] * b[k,j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//행렬을 거듭제곱하기위한 함수</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[,] repeated_squared(<span class="keyword">int</span>[,] x, <span class="keyword">int</span>[,] y)&#123;</span><br><span class="line"><span class="keyword">int</span> n = x.GetLength(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span>[,] c = <span class="keyword">new</span> <span class="keyword">int</span>[n,n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)&#123;</span><br><span class="line">c[i,j] += x[i,k] * y[k,j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://sangjin256.github.io/2020/06/01/fibonacci/[object%20Object]/[object%20Object]/#disqus_thread</comments>
    </item>
    
    <item>
      <title>정렬 알고리즘</title>
      <link>http://sangjin256.github.io/2020/05/30/sort/[object%20Object]/[object%20Object]/</link>
      <guid>http://sangjin256.github.io/2020/05/30/sort/[object%20Object]/[object%20Object]/</guid>
      <pubDate>Sat, 30 May 2020 02:39:22 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;정렬이란&quot;&gt;&lt;a href=&quot;#정렬이란&quot; class=&quot;headerlink&quot; title=&quot;정렬이란?&quot;&gt;&lt;/a&gt;정렬이란?&lt;/h3&gt;&lt;p&gt;정렬(sorting)은 이름, 학번, 키 등 핵심 항목의 대소 관계에 따라 데이터 집합을 일정한 순서로 줄지
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="정렬이란"><a href="#정렬이란" class="headerlink" title="정렬이란?"></a>정렬이란?</h3><p>정렬(sorting)은 이름, 학번, 키 등 핵심 항목의 대소 관계에 따라 데이터 집합을 일정한 순서로 줄지어 늘어서도록 바꾸는 작업을 말한다. 정렬을 하면 검색을 더 쉽게 할 수 있게 된다.</p><hr><h4 id="swap-메소드"><a href="#swap-메소드" class="headerlink" title="swap 메소드"></a>swap 메소드</h4><p>기본적으로 아래의 정렬들에서 쓸 swap 메소드를 미리 정의하는게 편합니다.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Swap</span>(<span class="params"><span class="keyword">int</span>[] arr, <span class="keyword">int</span> a, <span class="keyword">int</span> b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = arr[a];</span><br><span class="line">arr[a] = arr[b];</span><br><span class="line">arr[b] = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="버블-정렬"><a href="#버블-정렬" class="headerlink" title="버블 정렬"></a>버블 정렬</h3><h5 id="O-n2-시간에-동작"><a href="#O-n2-시간에-동작" class="headerlink" title="O(n2)시간에 동작"></a>O(n<sup>2</sup>)시간에 동작</h5><p>이웃한 두 요소의 대소 관계를 비교하여 교환을 반복하는 정렬 방법</p><h4 id="기본-코드"><a href="#기본-코드" class="headerlink" title="기본 코드"></a>기본 코드</h4><p>a[j-1]과 a[j]를 비교해서 앞쪽이 크면 교환하고 그 이후의 비교, 교환 과정은 바로 앞쪽에서 수행해야 하므로 j의 값이 1씩 감소한다.<br>각 과정에서 앞쪽 i개의 요소는 정렬이 끝난 상태라고 가정하므로 한 번의 과정에서는 j의 값이 i+1이 될 때까지 비교, 교환을 수행하면 된다.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleSort</span>(<span class="params"><span class="keyword">int</span>[] a, <span class="keyword">int</span> n</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt; i; j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j<span class="number">-1</span>] &gt; a[j]) Swap(a, j<span class="number">-1</span>, j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="알고리즘-개선"><a href="#알고리즘-개선" class="headerlink" title="알고리즘 개선"></a>알고리즘 개선</h4><p>각각의 과정에서 비교, 교환을 하다가 어떤 시점 이후에 교환이 수행되지 않는다면 그보다 앞쪽의 요소는 이미 정렬을 마친 상태라고 생각해도 무방<br>따라서 마지막으로 요소를 교환한 위치를 저장한 다음에, 다음 과정에서 그 위치까지만 비교, 교환을 수행하면 된다.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BubbleSort</span>(<span class="params"><span class="keyword">int</span>[] a, <span class="keyword">int</span> n</span>)</span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(k &lt; n<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> last = n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = n<span class="number">-1</span>; j &gt; k; j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j<span class="number">-1</span>] &gt; a[j])&#123;</span><br><span class="line">Swap(a, j<span class="number">-1</span>, j);</span><br><span class="line">last = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">k = last;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="병합-정렬"><a href="#병합-정렬" class="headerlink" title="병합 정렬"></a>병합 정렬</h3><h5 id="O-nlogn-시간에-동작"><a href="#O-nlogn-시간에-동작" class="headerlink" title="O(nlogn)시간에 동작"></a>O(nlogn)시간에 동작</h5><p>배열을 앞부분과 뒷부분으로 나누어 각각 정렬한 다음 병합하는 작업을 반복하는 정렬 방법<br>배열의 앞부분을 병합 정렬로 정렬하고 배열의 뒷부분을 병합 정렬로 정렬해서<br>마지막으로 배열의 앞부분과 뒷부분을 병합하는 방법.<br>따라서 재귀를 사용한다.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">MergeSort</span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>[] buff;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __MergeSort(<span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right)&#123;</span><br><span class="line"><span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> center = (left + right) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> k = left;</span><br><span class="line"></span><br><span class="line">__MergeSort(a, left, center);</span><br><span class="line">__MergeSort(a, center+<span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = left; i &lt;= center; i++) buff[p++] = a[i];</span><br><span class="line"><span class="keyword">while</span>(i &lt;= right &amp;&amp; j &lt; p) a[k++] = (buff[j] &lt;= a[i]) ? buff[j++] : a[i++];</span><br><span class="line"><span class="keyword">while</span>(j &lt; p) a[k++] = buff[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MergeSort</span>(<span class="params"><span class="keyword">int</span>[] a, <span class="keyword">int</span> n</span>)</span>&#123;</span><br><span class="line">buff = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">__MergeSort(a, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">buff = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="퀵-정렬"><a href="#퀵-정렬" class="headerlink" title="퀵 정렬"></a>퀵 정렬</h3><h5 id="O-nlogn-시간에-동작-1"><a href="#O-nlogn-시간에-동작-1" class="headerlink" title="O(nlogn)시간에 동작"></a>O(nlogn)시간에 동작</h5><p>일반적으로 사용되고 있는 아주 빠른 정렬 알고리즘<br>2개의 그룹을 나누는 기준인 피벗을 정하고(보통 중앙) 피벗 이하의 요소를 배열 왼쪽으로, 이상의 요소를 배열 오른쪽으로 옮겨야 함.<br>그렇게 하기 위해서 아래의 작업을 먼저 수행<br>피벗을 x, 왼쪽 끝 요소의 인덱스 pl을 왼쪽 커서, 오른쪽 끝 요소의 인덱스 pr을 오른쪽 커서라고 할때</p><ol><li>a[pl] &gt;= x가 성립하는 요소를 찾을 때까지 pl을 오른쪽으로 스캔</li><li>a[pr] &lt;= x가 성립하는 요소를 찾을 때까지 pr을 왼쪽으로 스캔</li></ol><p>스캔이 완료되면 a[pl]과 a[pr]의 값을 교환하고 다시 스캔을 진행한다.<br>스캔을 진행하다보면 pl과 pr이 교차하는 지점이 나오는데 그 지점으로 나뉘는 두 개의 그룹을 가지고 다시 퀵 정렬을 시작한다.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QuickSort</span>(<span class="params"><span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right</span>)</span>&#123;</span><br><span class="line"><span class="keyword">int</span> pl = left;</span><br><span class="line"><span class="keyword">int</span> pr = right;</span><br><span class="line"><span class="keyword">int</span> x = a[(pl+pr) / <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(a[pl] &lt; x) pl++;</span><br><span class="line"><span class="keyword">while</span>(a[pr] &gt; x) pr--;</span><br><span class="line"><span class="keyword">if</span>(pl &lt;= pr) Swap(a, pl++, pr--);</span><br><span class="line">&#125; <span class="keyword">while</span>(pl &lt;= pr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(left &lt; pr) QuickSort(a, left, pr);</span><br><span class="line"><span class="keyword">if</span>(pl &lt; right) QuickSort(a, pl, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="비재귀적인-퀵-정렬"><a href="#비재귀적인-퀵-정렬" class="headerlink" title="비재귀적인 퀵 정렬"></a>비재귀적인 퀵 정렬</h4><p>재귀는 함수를 호출하기 때문에 직관적이기는 하지만 비재귀에 비해 시간 성능이 저하된다.<br>재귀가 더 좋을때도 있지만 대부분의 경우에는 비재귀가 더 효율적인데 퀵 정렬같은 정렬 알고리즘이 그 예이다.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QuickSort</span>(<span class="params"><span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right</span>)</span>&#123;</span><br><span class="line">Stack&lt;<span class="keyword">int</span>&gt; lstack = <span class="keyword">new</span> Stack&lt;<span class="keyword">int</span>&gt;(right - left + <span class="number">1</span>);</span><br><span class="line">Stack&lt;<span class="keyword">int</span>&gt; rstack = <span class="keyword">new</span> Stack&lt;<span class="keyword">int</span>&gt;(right - left + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">lstack.Push(left);</span><br><span class="line">rstack.Push(right);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(lstack.Count != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> pl = left = lstack.Pop();</span><br><span class="line"><span class="keyword">int</span> pr = right = rstack.Pop();</span><br><span class="line"><span class="keyword">int</span> x = a[(left + right) / <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"><span class="keyword">while</span>(a[pl] &lt; x) pl++;</span><br><span class="line"><span class="keyword">while</span>(a[pr] &gt; x) pr--;</span><br><span class="line"><span class="keyword">if</span>(pl &lt;= pr) Swap(a, pl++, pr--);</span><br><span class="line">&#125; <span class="keyword">while</span>(pl &lt;= pr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(left &lt; pr)&#123;</span><br><span class="line">lstack.Push(left);</span><br><span class="line">rstack.Push(pr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pl &lt; right)&#123;</span><br><span class="line">lstack.Push(pl);</span><br><span class="line">rstack.Push(right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="힙-정렬"><a href="#힙-정렬" class="headerlink" title="힙 정렬"></a>힙 정렬</h3><h5 id="O-nlogn-시간에-동작-2"><a href="#O-nlogn-시간에-동작-2" class="headerlink" title="O(nlogn)시간에 동작"></a>O(nlogn)시간에 동작</h5><p>힙(heap)을 사용하는 정렬 방법<br>힙은 &#39;부모의 값이 자식의 값보다 항상 크다’(또는 그 반대)는 조건을 만족하는 완전이진트리<br>가장 큰 값이 루트에 위치한다는 특징을 이용<br>downheap 메소드를 사용하여 a[left] ~ a[right]의 요소를 힙으로 만들고 루트(a[0])에 있는 가장 큰 값을 빼내어 배열 마지막 요소와 바꾸고 배열의 나머지 부분을 다시 힙으로 만드는 과정을 반복하여 정렬을 수행</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DownHeap</span>(<span class="params"><span class="keyword">int</span>[] a, <span class="keyword">int</span> left, <span class="keyword">int</span> right</span>)</span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = a[left];</span><br><span class="line"><span class="keyword">int</span> child;</span><br><span class="line"><span class="keyword">int</span> parent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(parent = left; parent &lt; (right + <span class="number">1</span>) / <span class="number">2</span>; parent = child)&#123;</span><br><span class="line"><span class="keyword">int</span> cl = parent * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> cr = cl + <span class="number">1</span>;</span><br><span class="line">child = (cr &lt;= right &amp;&amp; a[cr] &gt; a[cl]) ? cr : cl;</span><br><span class="line"><span class="keyword">if</span>(tmp &gt;= a[child]) <span class="keyword">break</span>;</span><br><span class="line">a[parent] = a[child];</span><br><span class="line">&#125;</span><br><span class="line">a[parent] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">HeapSort</span>(<span class="params"><span class="keyword">int</span>[] a, <span class="keyword">int</span> n</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = (n<span class="number">-1</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) DownHeap(a, i, n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">Swap(a, <span class="number">0</span>, i);</span><br><span class="line">DownHeap(a, <span class="number">0</span>, i<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="계수-정렬"><a href="#계수-정렬" class="headerlink" title="계수 정렬"></a>계수 정렬</h3><h5 id="O-n-시간에-동작-최악의-경우에는-O-n2-시간에-동작"><a href="#O-n-시간에-동작-최악의-경우에는-O-n2-시간에-동작" class="headerlink" title="O(n)시간에 동작, 최악의 경우에는 O(n2)시간에 동작"></a>O(n)시간에 동작, 최악의 경우에는 O(n<sup>2</sup>)시간에 동작</h5><p>배열에서 각 숫자가 몇번 들어가는지를 이용하는 정렬 방법<br>먼저 각 숫자가 몇 번 들어가는지를 세어 주고<br>이 횟수를 누적 합 배열로 만들어준다.<br>그리고 나서 처음 수열을 역순으로 살펴보면서 누적 합 배열과 비교하며 자리를 찾아간다.<br>원소의 값이 크면 클수록 퀵정렬이나 힙정렬이 더 빠르다. 따라서 원소의 값이 아주 작을 때만 사용하는 것이 좋다.(0~10)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span>[] <span class="title">CountingSort</span>(<span class="params"><span class="keyword">int</span>[] a, <span class="keyword">int</span> n</span>)</span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] tmp = <span class="keyword">new</span> <span class="keyword">int</span>[a의 최댓값 + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">tmp[a[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; tmp.Length; i++)&#123;</span><br><span class="line">tmp[i] += tmp[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">result[--tmp[a[i]]] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://sangjin256.github.io/2020/05/30/sort/[object%20Object]/[object%20Object]/#disqus_thread</comments>
    </item>
    
    <item>
      <title>포스팅을 위한 hexo 문법들</title>
      <link>http://sangjin256.github.io/2020/05/28/starting/[object%20Object]/[object%20Object]/</link>
      <guid>http://sangjin256.github.io/2020/05/28/starting/[object%20Object]/[object%20Object]/</guid>
      <pubDate>Thu, 28 May 2020 12:05:57 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;마크다운-문법&quot;&gt;&lt;a href=&quot;#마크다운-문법&quot; class=&quot;headerlink&quot; title=&quot;마크다운 문법&quot;&gt;&lt;/a&gt;마크다운 문법&lt;/h1&gt;&lt;h3 id=&quot;1-제목-크기-변경&quot;&gt;&lt;a href=&quot;#1-제목-크기-변경&quot; class=&quot;head
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="마크다운-문법"><a href="#마크다운-문법" class="headerlink" title="마크다운 문법"></a>마크다운 문법</h1><h3 id="1-제목-크기-변경"><a href="#1-제목-크기-변경" class="headerlink" title="1. 제목 크기 변경"></a>1. 제목 크기 변경</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 제목 1</span><br><span class="line">## 제목 2</span><br><span class="line">### 제목 3</span><br><span class="line">#### 제목 4</span><br><span class="line">##### 제목 5</span><br><span class="line">###### 제목 6</span><br></pre></td></tr></table></figure><p>아래와 같이 표시된다.</p><h1 id="제목-1"><a href="#제목-1" class="headerlink" title="제목 1"></a>제목 1</h1><h2 id="제목-2"><a href="#제목-2" class="headerlink" title="제목 2"></a>제목 2</h2><h3 id="제목-3"><a href="#제목-3" class="headerlink" title="제목 3"></a>제목 3</h3><h4 id="제목-4"><a href="#제목-4" class="headerlink" title="제목 4"></a>제목 4</h4><h5 id="제목-5"><a href="#제목-5" class="headerlink" title="제목 5"></a>제목 5</h5><h6 id="제목-6"><a href="#제목-6" class="headerlink" title="제목 6"></a>제목 6</h6><h3 id="2-인용문"><a href="#2-인용문" class="headerlink" title="2. 인용문"></a>2. 인용문</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; “좋은 디자인은 그 때문에 소모되는 비용보다 빠르게 가치가 쌓인다.”</span><br><span class="line">&gt;&gt; “좋은 디자인은 그 때문에 소모되는 비용보다 빠르게 가치가 쌓인다.”</span><br><span class="line">&gt;&gt;&gt; “좋은 디자인은 그 때문에 소모되는 비용보다 빠르게 가치가 쌓인다.”</span><br></pre></td></tr></table></figure><p>아래와 같이 표시된다.</p><blockquote><p>“좋은 디자인은 그 때문에 소모되는 비용보다 빠르게 가치가 쌓인다.”</p><blockquote><p>“좋은 디자인은 그 때문에 소모되는 비용보다 빠르게 가치가 쌓인다.”</p><blockquote><p>“좋은 디자인은 그 때문에 소모되는 비용보다 빠르게 가치가 쌓인다.”</p></blockquote></blockquote></blockquote><h4 id="저자와-출처-제목이-있는-경우-아래와-같이-사용한다"><a href="#저자와-출처-제목이-있는-경우-아래와-같이-사용한다" class="headerlink" title="저자와 출처 제목이 있는 경우 아래와 같이 사용한다."></a>저자와 출처 제목이 있는 경우 아래와 같이 사용한다.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote 토마스 C. 게일,Thomas C. Gale %&#125;</span><br><span class="line">좋은 디자인은 그 때문에 소모되는 비용보다 빠르게 가치가 쌓인다.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>좋은 디자인은 그 때문에 소모되는 비용보다 빠르게 가치가 쌓인다.</p><footer><strong>토마스 C. 게일</strong><cite>Thomas C. Gale</cite></footer></blockquote><h3 id="3-글머리-기호"><a href="#3-글머리-기호" class="headerlink" title="3. 글머리 기호"></a>3. 글머리 기호</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* 프로그래밍</span><br><span class="line">  * 프로그래밍</span><br><span class="line">    * 프로그래밍</span><br><span class="line">  </span><br><span class="line">+ 프로그래밍</span><br><span class="line">  + 프로그래밍</span><br><span class="line">    + 프로그래밍</span><br><span class="line"></span><br><span class="line">- 프로그래밍</span><br><span class="line">  - 프로그래밍</span><br><span class="line">    - 프로그래밍</span><br></pre></td></tr></table></figure><p>아래와 같이 표시된다.<br>첫번째 줄보다 2칸 이상씩 띄어서 써야한다.</p><ul><li>프로그래밍<ul><li>프로그래밍<ul><li>프로그래밍</li></ul></li></ul></li></ul><ul><li>프로그래밍<ul><li>프로그래밍<ul><li>프로그래밍</li></ul></li></ul></li></ul><ul><li>프로그래밍<ul><li>프로그래밍<ul><li>프로그래밍</li></ul></li></ul></li></ul><h3 id="4-강조"><a href="#4-강조" class="headerlink" title="4. 강조"></a>4. 강조</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">이텔릭체 - *이텔릭체* or _이텔릭체_</span><br><span class="line">두껍게 - **두껍게** or __두껍게__</span><br><span class="line">두껍게+이텔릭체 - **_이텔릭체_**</span><br></pre></td></tr></table></figure><p>아래와 같이 표시된다.<br>이텔릭체 - <em>이텔릭체</em> or <em>이텔릭체</em><br>두껍게 - <strong>두껍게</strong> or <strong>두껍게</strong><br>두껍게+이텔릭체 - <strong><em>이텔릭체</em></strong></p><h3 id="5-코드-넣기"><a href="#5-코드-넣기" class="headerlink" title="5. 코드 넣기"></a>5. 코드 넣기</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Lecture</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params">stirng[] args</span>)</span>&#123;</span><br><span class="line">Console.WriteLine(<span class="string">"안녕하세요"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>코드 시작과 끝에 Tab위에있는 버튼을 3번씩 쓰면된다.</p><h3 id="6-수평선"><a href="#6-수평선" class="headerlink" title="6. 수평선"></a>6. 수평선</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">- - -</span><br></pre></td></tr></table></figure><p>모두 아래와 같이 표시된다.</p><hr><hr><h3 id="7-링크"><a href="#7-링크" class="headerlink" title="7. 링크"></a>7. 링크</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Google](https:&#x2F;&#x2F;google.com)</span><br><span class="line">[Naver](https:&#x2F;&#x2F;naver.com)</span><br></pre></td></tr></table></figure><p><a href="https://google.com" target="_blank" rel="external nofollow noopener noreferrer">Google</a><br><a href="https://naver.com" target="_blank" rel="external nofollow noopener noreferrer">Naver</a></p><h3 id="8-유튜브"><a href="#8-유튜브" class="headerlink" title="8. 유튜브"></a>8. 유튜브</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% youtube video_id %&#125;</span><br></pre></td></tr></table></figure><p>video_id부분에 ‘비디오 공유’를 눌러서 나오는 url의 뒷부분에 적힌 아이디를 넣으면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% youtube eDEFolvLn0A %&#125;</span><br></pre></td></tr></table></figure><div class="video-container"><iframe src="https://www.youtube.com/embed/eDEFolvLn0A" frameborder="0" loading="lazy" allowfullscreen></iframe></div><h3 id="9-포스트-삽입"><a href="#9-포스트-삽입" class="headerlink" title="9. 포스트 삽입"></a>9. 포스트 삽입</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path slug %&#125;</span><br><span class="line">&#123;% post_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><p>아래와 깉이 slug[title]부분에 포스트 파일 제목을 입력하면 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link first %&#125;</span><br></pre></td></tr></table></figure><a href="/2020/05/28/first/%5Bobject%20Object%5D/%5Bobject%20Object%5D/" title="안녕하세요!">안녕하세요!</a><h3 id="10-이미지-삽입"><a href="#10-이미지-삽입" class="headerlink" title="10. 이미지 삽입"></a>10. 이미지 삽입</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">먼저 source폴더 안에 image폴더를 만들어준 후 그안에 사진을 넣고</span><br><span class="line">![](&#x2F;image&#x2F;IMG_0191.jpeg)</span><br><span class="line">와 같이 적는다.</span><br><span class="line"></span><br><span class="line">이미지 크기를 조정하고 싶을 경우에는 아래와 같이 적어야 한다.</span><br><span class="line">&lt;img src&#x3D;&quot;&#x2F;image&#x2F;IMG_0191.jpeg&quot; width&#x3D;&quot;400px&quot; height&#x3D;&quot;300px&quot; title&#x3D;&quot;크기 조정&quot;&gt;&lt;&#x2F;img&gt;&lt;br&#x2F;&gt;</span><br></pre></td></tr></table></figure><p><img src="/image/IMG_0191.jpeg" alt><br><img src="/image/IMG_0191.jpeg" width="400px" height="300px" title="크기 조정"><br></p><h4 id="이미지에-하이퍼링크-달기"><a href="#이미지에-하이퍼링크-달기" class="headerlink" title="이미지에 하이퍼링크 달기"></a>이미지에 하이퍼링크 달기</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[![](&#x2F;image&#x2F;IMG_0191.jpeg)](https:&#x2F;&#x2F;sangjin256.github.io)</span><br></pre></td></tr></table></figure><p><a href="https://sangjin256.github.io"><img src="/image/IMG_0191.jpeg" alt></a></p><h1 id="포스팅-작성-완료-후-업로드"><a href="#포스팅-작성-완료-후-업로드" class="headerlink" title="포스팅 작성 완료 후 업로드"></a>포스팅 작성 완료 후 업로드</h1><p>방법 1<br>hexo generate<br>hexo deploy</p><p>방법2<br>hexo clean &amp;&amp; hexo deploy -g</p>]]></content:encoded>
      
      <comments>http://sangjin256.github.io/2020/05/28/starting/[object%20Object]/[object%20Object]/#disqus_thread</comments>
    </item>
    
    <item>
      <title>안녕하세요!</title>
      <link>http://sangjin256.github.io/2020/05/28/first/[object%20Object]/[object%20Object]/</link>
      <guid>http://sangjin256.github.io/2020/05/28/first/[object%20Object]/[object%20Object]/</guid>
      <pubDate>Thu, 28 May 2020 08:57:18 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;안녕하세요 현재 대학생인 게임개발자 지망생입니다.&lt;br&gt;앞으로 여기에다가 게임 개발 일지나 알고리즘 풀이등을 올릴 예정입니다.&lt;br&gt;자기계발을 위해 조금씩이라도 꾸준히 포스팅하겠습니다!&lt;/p&gt;

        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>안녕하세요 현재 대학생인 게임개발자 지망생입니다.<br>앞으로 여기에다가 게임 개발 일지나 알고리즘 풀이등을 올릴 예정입니다.<br>자기계발을 위해 조금씩이라도 꾸준히 포스팅하겠습니다!</p>]]></content:encoded>
      
      <comments>http://sangjin256.github.io/2020/05/28/first/[object%20Object]/[object%20Object]/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
